>> init global ->{
in vec4 shadowCoords;
in vec3 worldSpace;
uniform sampler2DShadow depthMap;
const float bias = 0.005;
const int samples = 4;
const vec2 poissonDisk[16] = vec2[](
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);
}<<

>> shadowMap ->{
	vec3 shadowCoordsDivided = shadowCoords.xyz / shadowCoords.w;
	float shadow = 1;
	for(int i = 0; i < samples; i++){
		float dot_product = dot(vec4(worldSpace, i), vec4(12.9898,78.233,45.164,94.673));
		int index = int(16 * fract(sin(dot_product) * 43758.5453)) % 16;
		float distanceFromLight = texture(depthMap, vec3(shadowCoordsDivided.xy + poissonDisk[index] / 700, shadowCoordsDivided.z - bias));
		if(shadowCoords.w > 0){
			//shadow = distanceFromLight < shadowCoordsDivided.z - bias ? 0.5 : 1;
			shadow -= 0.2 * (1 - distanceFromLight);
		}
	}
	diffuseColor *= shadow;
}<<